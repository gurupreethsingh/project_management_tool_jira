user routes

const upload = multer({ storage });
router.post("/register", register);
router.post("/register-student", registerStudent);
router.post("/login", login);
router.get("/getUserById/:id", getUserById);
router.put("/update-profile/:id", upload.single("avatar"), updateUser);
router.delete("/delete-user/:id", deleteUser);
router.get("/getUserCounts", getUserCounts);
router.get("/all-users", getAllUsers);
router.get("/single-user/:id", getUserById);
router.put("/update-user-role/:id", updateUserRoleAndPrivileges);
router.post("/forgot-password", forgotPassword);
router.post("/verify-otp", verifyOTP);
router.post("/reset-password", resetPassword);
router.get("/getUserCountsByRole", getUserCountsByRole);
router.get("/get-users-by-role", getUsersByRole);
router.get("/get-instructors", getInstructors);
router.get("/instructors", getInstructors);
router.get("/get-authors", getAuthors);
router.get("/get-students", getStudents);

const controller = require("../controllers/SubCategoryController");
router.post("/add-sub-category", controller.addSubCategory);
router.get("/all-subcategories", controller.getAllSubCategories);
router.get("/get-subcategory-by-id/:id", controller.getSubCategoryById);
router.put("/update-subcategory/:id", controller.updateSubCategory);
router.delete("/delete-subcategory/:id", controller.deleteSubCategory);
router.get("/count-all-subcategories", controller.countAllSubCategories);
router.get("/count-active-subcategories", controller.countActiveSubCategories);
router.get("/count-subcategories-by-category", controller.countSubCategoriesPerCategory);
router.get("/get-subcategories-by-category", controller.getSubCategoriesByCategory);

// routes/SemisterRoutes.js
const SemisterController = require("../controllers/SemisterController");
router.post("/semisters", SemisterController.createSemister); // Create
router.get("/semisters", SemisterController.listSemisters); // List (search/filter)
router.get("/semisters/:id", SemisterController.getSemisterById); // Read by id
router.get(  "/semisters/by-slug/:degreeId/:slug",  SemisterController.getSemisterBySlug);
router.patch("/semisters/:id", SemisterController.updateSemister);
router.delete("/semisters/:id", SemisterController.deleteSemister);
router.post("/semisters/:id/toggle-active", SemisterController.toggleActive);
router.post(  "/semisters/bulk/toggle-active",  SemisterController.bulkToggleActive);
router.get("/semisters/counts/summary", SemisterController.countsSummary);
router.get("/semisters/counts/by-degree", SemisterController.countsByDegree);
router.get(  "/semisters/counts/by-academic-year",  SemisterController.countsByAcademicYear);
router.get("/semisters/facets", SemisterController.getFacets);
router.patch("/semisters/:id/move-degree", SemisterController.moveToDegree);
router.patch("/semisters/:id/renumber", SemisterController.renumber);
router.patch("/semisters/reorder", SemisterController.reorderWithinDegree);
router.post(  "/semisters/bulk/clone-to-degrees",  SemisterController.cloneToDegrees);

router.get("/my-notification-feed", verifyToken, ctrl.myFeed);
router.get("/my-unseen-notification-count", verifyToken, ctrl.unseenCountForMe);
router.post("/mark-delivery-seen/:id", verifyToken, ctrl.markSeenForMe);
router.post("/dismiss-delivery/:id", verifyToken, ctrl.dismissForMe);

router.post("/create-notification", verifyToken, ctrl.create);
router.get("/list-notifications", verifyToken, ctrl.list);
router.get("/count-notifications", verifyToken, ctrl.countAll);
router.get("/count-notifications-by-status", verifyToken, ctrl.countByStatus);
router.get(  "/count-notifications-by-category",  verifyToken,  ctrl.countByCategory);
router.post("/filter-notifications", verifyToken, ctrl.filter);
router.get("/get-notification/:id", verifyToken, ctrl.getById);
router.patch("/update-notification/:id", verifyToken, ctrl.update);
router.delete("/delete-notification/:id", verifyToken, ctrl.remove);
router.post("/schedule-notification/:id", verifyToken, ctrl.schedule);
router.post("/send-notification/:id", verifyToken, ctrl.sendNow);
router.post("/cancel-notification/:id", verifyToken, ctrl.cancel);
router.post("/duplicate-notification/:id", verifyToken, ctrl.duplicate);
router.get(  "/list-notification-deliveries/:id",  verifyToken,  ctrl.listDeliveries);
router.get(  "/export-notification-deliveries-csv/:id",  verifyToken,  ctrl.exportDeliveriesCsv);
router.get("/get-notification-seen-stats/:id", verifyToken, ctrl.seenStats);

router.post(  "/resend-notification-to-user/:id/:userId",  verifyToken,  ctrl.resendToUser);
router.post("/resend-notification-to-role/:id", verifyToken, ctrl.resendToRole);
router.post(  "/resend-notification-to-users/:id",  verifyToken,  ctrl.resendToUsers);
router.post("/bulk-delete-notifications", verifyToken, ctrl.bulkDelete);
router.post("/bulk-update-notification-status", verifyToken, ctrl.bulkStatus);
router.post("/bulk-duplicate-notifications", verifyToken, ctrl.bulkDuplicate);

router.post("/apply", ctrl.apply);
router.get("/list", ctrl.list);
router.get("/counts", ctrl.counts);
router.get("/get-by-email", ctrl.getByEmail);
router.get("/quick-search", ctrl.quickSearch);
router.get("/get-by-id/:id", ctrl.getById);
router.patch("/update/:id", ctrl.update);
router.patch("/set-profile/:id", ctrl.setProfile);
router.patch("/set-address/:id", ctrl.setAddress);
router.post("/verify-email/:id", ctrl.verifyEmail);
router.post("/verify-kyc/:id", ctrl.verifyKyc);
router.post("/approve/:id", ctrl.approve);
router.post("/reject/:id", ctrl.reject);
router.post("/toggle-active/:id", ctrl.toggleActive);
router.post("/set-status/:id", ctrl.setStatus);
router.post("/update-assignments/:id", ctrl.updateAssignments);
router.post("/assign-add/:id", ctrl.assignAdd);
router.post("/assign-remove/:id", ctrl.assignRemove);
router.post("/bulk-action", ctrl.bulkAction);
router.delete("/remove/:id", ctrl.remove);
router.delete("/hard-delete/:id", ctrl.hardDelete);

// routes/ExamRoutes.js
const router = require("express").Router();
const C = require("../controllers/ExamController");
router.post("/create-exam", C.createExam);
router.get("/list-exams", C.listExams);
router.get("/get-exam/:id", C.getExamById);
router.patch("/update-exam/:id", C.updateExamById);
router.delete("/delete-exam/:id", C.deleteExamById);
router.get("/count-all", C.countAll);
router.get("/count-by", C.countBy);
router.get("/search-exams", C.searchExams);
router.get(  "/get-by-degree-semester-course/:degreeId/:semesterId/:courseId",  C.getByDegreeSemesterCourse);

router.get(  "/get-published-by-dsc/:degreeId/:semesterId/:courseId",  C.getPublishedByDegreeSemesterCourse);
router.get("/upcoming-exams", C.upcomingExams);
router.get("/past-exams", C.pastExams);
router.get("/exam-stats", C.stats);
router.post("/toggle-publish/:id", C.togglePublish);
router.post("/increment-attempt/:id", C.incrementAttemptCount);

// routes/DegreeRoutes.js
router.post("/create-degree", DegreeController.createDegree);
router.get("/list-degrees", DegreeController.listDegrees);
router.get("/get-degree-by-id/slug/:id", DegreeController.getDegreeById);
router.get("/get-degree-by-slug/slug/:slug", DegreeController.getDegreeBySlug);
router.patch("/update-degree/slug/:id", DegreeController.updateDegree);
router.delete("/delete-degree/:id", DegreeController.deleteDegree);
router.post("/degrees/:id/toggle-active", DegreeController.toggleActive);
router.get("/degrees/counts/summary", DegreeController.countsSummary);
router.get("/degrees/counts/by-level", DegreeController.countsByLevel);
router.get("/degrees/counts/by-department", DegreeController.countsByDepartment);
router.get("/degrees/facets", DegreeController.getFacets);

// routes/CourseRoutes.js
router.post("/create-courses", CourseController.createCourse);
router.get("/list-courses", CourseController.listCourses);
router.get("/get-course-by-id/:id", CourseController.getCourseById);
router.get("/get-course-by-slug/slug/:slug", CourseController.getCourseBySlug);
router.patch("/update-course/:id", CourseController.updateCourse);
router.delete("/delete-course/:id", CourseController.deleteCourse);
router.post("/courses/:id/toggle-published", CourseController.togglePublished);
router.post("/courses/:id/toggle-archived", CourseController.toggleArchived);
router.post("/courses/:id/toggle-featured", CourseController.toggleFeatured);
router.post("/courses/bulk/visibility", CourseController.bulkSetVisibility);
router.get("/courses/counts/summary", CourseController.countsSummary);
router.get("/courses/counts/by-category", CourseController.countsByCategory);
router.get("/courses/counts/by-level", CourseController.countsByLevel);
router.get("/courses/counts/by-access", CourseController.countsByAccessType);
router.get("/courses/facets", CourseController.facets);
router.post("/courses/:id/modules", CourseController.addModule);
router.patch("/courses/:id/modules/:mIndex", CourseController.updateModule);
router.delete("/courses/:id/modules/:mIndex", CourseController.deleteModule);
router.post("/courses/:id/modules/:mIndex/topics", CourseController.addTopic);
router.patch(  "/courses/:id/modules/:mIndex/topics/:tIndex",  CourseController.updateTopic);
router.delete(  "/courses/:id/modules/:mIndex/topics/:tIndex",  CourseController.deleteTopic);
router.patch("/courses/:id/modules/reorder", CourseController.reorderModules);
router.patch(  "/courses/:id/modules/:mIndex/topics/reorder",  CourseController.reorderTopics);
router.post("/courses/:id/enroll", CourseController.enrollStudent);
router.patch("/courses/:id/enrollment", CourseController.updateEnrollment);
router.delete(  "/courses/:id/enrollment/:studentId",  CourseController.unenrollStudent);
router.post("/courses/:id/ratings", CourseController.addOrUpdateRating);
router.post("/courses/:id/threads", CourseController.addThread);
router.post("/courses/:id/threads/:tIndex/replies", CourseController.addReply);

// category routes. 

router.post(  "/add-category",  categoryUpload.single("category_image"),  addCategory);
router.get("/all-categories", getAllCategories);
router.get("/category-count", getCategoryCount);
router.get("/category-product-counts", getCategoryCourseCounts);
router.get("/single-category/:id", getCategoryById);

router.put(  "/update-category/:id",  categoryUpload.single("category_image"),  updateCategory
);
router.delete("/delete-category/:id", deleteCategory);



