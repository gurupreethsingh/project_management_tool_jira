{
  "_id": {
    "$oid": "68a9b746a8dde74b3a228fb8"
  },
  "name": "Diploma in Web Development",
  "code": "DIP-WEBDEV",
  "slug": "diploma-in-web-development",
  "description": "Practical diploma covering HTML/CSS, JavaScript, React, Nextjs and Node.js.",
  "level": "diploma",
  "durationYears": 1,
  "totalSemesters": 2,
  "department": "Computer Science",
  "awardingBody": "University of Orion",
  "accreditation": [
    "NSDC"
  ],
  "isActive": true,
  "assets": {
    "logoUrl": "https://example.educa/assets/dip-webdev-logo.png",
    "brochureUrl": "https://example.educa/assets/dip-webdev-brochure.pdf"
  },
  "metadata": {
    "portfolioRequired": false,
    "mode": "full-time"
  },
  "__v": 1,
  "coordinators": [],
  "updatedAt": {
    "$date": "2025-08-23T19:56:02.232Z"
  }
}

this is the degree id. 

this is to fetch all the semisters in the above provided. degree. 

db.semisters.find({ degree: ObjectId("68a9b746a8dde74b3a228fb8") }).sort({ semNumber: 1 });

ecoders_learning_platform> db.semisters.find({ degree: ObjectId("68a9b746a8dde74b3a228fb8") }).sort({ semNumber: 1 });
[
  {
    _id: ObjectId('68ab4e6a3fffd68344464aaa'),
    degree: ObjectId('68a9b746a8dde74b3a228fb8'),
    semNumber: 1,
    createdAt: ISODate('2025-08-24T17:39:54.654Z'),
    isActive: true,
    order: 1,
    slug: 'diploma-in-web-development-semister-1',
    title: 'Semister 1',
    updatedAt: ISODate('2025-08-24T17:39:54.654Z')
  },
  {
    _id: ObjectId('68ab4e6a3fffd68344464aac'),
    degree: ObjectId('68a9b746a8dde74b3a228fb8'),
    semNumber: 2,
    createdAt: ISODate('2025-08-24T17:39:54.656Z'),
    isActive: true,
    order: 2,
    slug: 'diploma-in-web-development-semister-2',
    title: 'Semister 2',
    updatedAt: ISODate('2025-08-24T17:39:54.656Z')
  }
]

These are the two degrees i have. 




this is the category i want. (web devlopement)

_id
689514204f1b2bc6412a036b
category_name
"Web Development"
category_image
"uploads/category_images/category_image-1754600480800.jpg"

products
Array (empty)
createdAt
2025-08-07T21:01:20.801+00:00
updatedAt
2025-08-07T21:01:20.802+00:00
__v
0



in that one i have to select sub category as .  html , whose _id is 

_id
68a5e6a0796d139a01f96f26
subcategory_name
"Html"
category
689514204f1b2bc6412a036b
isDeleted
false
createdAt
2025-08-20T15:15:44.852+00:00
updatedAt
2025-08-20T15:15:44.852+00:00
__v
0



, i have this instructor. 


_id
68b0a960aaf3d1123d598367
firstName
"john"
lastName
"john"
email
"john@gmail.com"
phone
"6454654"
avatarUrl
"sdfasdf"
bio
"asdfdfsaf"
gender
"male"
dateOfBirth
2025-08-04T00:00:00.000+00:00

address
Object

languages
Array (1)

skills
Array (1)

areasOfExpertise
Array (1)

education
Array (1)

certifications
Array (1)

availability
Array (1)
hourlyRate
100
resumeUrl
"asdfds"
idProofUrl
"asdf"
website
"fdsa"
linkedin
"asdf"
github
"fdsa"
youtube
"asdf"
twitter
"fdas"
upiId
"asdf"
Show 16 more fields


take the instructor id from here. 






now give me an insert query, just to add one course. based on the 

Degree, semister, category, subcategory, instructor id.. to be inserted from the backend. based on this model file. 


// models/CourseModel.js
const mongoose = require("mongoose");
const { Schema } = mongoose;

// Helper to generate a slug from title when missing
const slugify = (str = "") =>
  String(str)
    .toLowerCase()
    .trim()
    .replace(/['"]/g, "")
    .replace(/\s+/g, "-")
    .replace(/[^a-z0-9-]/g, "")
    .replace(/-+/g, "-");

// ---------- Subdocuments ----------
const topicSchema = new Schema(
  {
    // SubTopic basics
    title: { type: String, trim: true },

    // 👇 NEW: learning content for each sub-topic
    explanation: { type: String, default: "" },       // theory/explanation text
    code: { type: String, default: "" },              // code snippet
    codeExplanation: { type: String, default: "" },   // explanation about the code
    codeLanguage: { type: String, default: "plaintext", trim: true }, // e.g., "javascript", "python"

    // Existing media/metadata
    videoUrl: { type: String, trim: true },
    pdfUrl: { type: String, trim: true },
    duration: { type: Number, min: 0 }, // minutes
    isFreePreview: { type: Boolean, default: false },
  },
  { _id: false }
);

const moduleSchema = new Schema(
  {
    title: { type: String, trim: true },
    description: { type: String, trim: true },
    topics: { type: [topicSchema], default: [] },
  },
  { _id: false }
);

// ---------- Main schema ----------
const courseSchema = new Schema(
  {
    // Basic Info
    title: { type: String, required: true, trim: true },
    slug: {
      type: String,
      required: true,
      unique: true, // single unique definition (no separate index() call)
      lowercase: true,
      trim: true,
    },
    description: { type: String, required: true },
    language: { type: String, default: "English" },
    level: {
      type: String,
      enum: ["Beginner", "Intermediate", "Advanced"],
      default: "Beginner",
    },
    thumbnail: { type: String, trim: true },
    promoVideoUrl: { type: String, trim: true }, // Trailer video
    durationInHours: { type: Number, required: true, min: 0 },
    price: { type: Number, default: 0, min: 0 },

    // Categorization (MANDATORY)
    category: { type: Schema.Types.ObjectId, ref: "Category", required: true },
    subCategory: {
      type: Schema.Types.ObjectId,
      ref: "SubCategory",
      required: true, // <- keep as-is per your current model; make false if you decide to make it optional
    },

    // Audience & Marketing
    requirements: { type: [String], default: [] },
    learningOutcomes: { type: [String], default: [] },
    tags: { type: [String], default: [] },
    metaTitle: { type: String, trim: true },
    metaDescription: { type: String, trim: true },
    keywords: { type: [String], default: [] },

    // Authors & Instructor
    authors: [{ type: Schema.Types.ObjectId, ref: "User" }],
    instructor: {
      type: Schema.Types.ObjectId,
      ref: "User",
      required: true,
      // no field-level index here (we add a schema-level one below)
    },

    // Course Content (main & sub-topics are optional at creation time)
    modules: { type: [moduleSchema], default: [] },
    totalModules: { type: Number, default: 0, min: 0 },
    totalTopics: { type: Number, default: 0, min: 0 },

    // Learning Materials
    learningResources: {
      videos: { type: [String], default: [] },
      pdfs: { type: [String], default: [] },
      assignments: { type: [String], default: [] },
      externalLinks: { type: [String], default: [] },
    },

    // Course Access
    accessType: {
      type: String,
      enum: ["Free", "Paid", "Subscription", "Lifetime"],
      default: "Paid",
    },
    maxStudents: { type: Number, min: 0 },
    enrollmentDeadline: Date,
    completionCriteria: {
      type: String,
      enum: ["All Topics", "Final Exam", "Manual Approval"],
      default: "All Topics",
    },

    // Enrollment Info (NOT required at creation time)
    enrolledStudents: [
      {
        studentId: { type: Schema.Types.ObjectId, ref: "User" },
        enrolledAt: { type: Date, default: Date.now },
        completed: { type: Boolean, default: false },
        progress: { type: Number, default: 0, min: 0, max: 100 },
        completedTopics: { type: [String], default: [] },
        // no examsTaken here (decoupled from Exam model)
        certificateIssued: { type: Boolean, default: false },
      },
    ],

    // Certificate
    issueCertificate: { type: Boolean, default: true },
    certificateTemplateUrl: { type: String, trim: true },

    // Ratings & Reviews
    ratings: [
      {
        studentId: { type: Schema.Types.ObjectId, ref: "User" },
        rating: { type: Number, min: 1, max: 5 },
        review: { type: String, trim: true },
        createdAt: { type: Date, default: Date.now },
      },
    ],
    averageRating: { type: Number, default: 0, min: 0, max: 5 },

    // Community Q&A
    discussionThreads: [
      {
        userId: { type: Schema.Types.ObjectId, ref: "User" },
        message: { type: String, trim: true },
        createdAt: { type: Date, default: Date.now },
        replies: [
          {
            userId: { type: Schema.Types.ObjectId, ref: "User" },
            message: { type: String, trim: true },
            createdAt: { type: Date, default: Date.now },
          },
        ],
      },
    ],

    // Flags & Sorting
    published: { type: Boolean, default: false },
    isArchived: { type: Boolean, default: false },
    isFeatured: { type: Boolean, default: false },
    order: { type: Number, default: 0 },

    // Versioning
    version: { type: String, default: "1.0" },
  },
  { timestamps: true }
);

// ---------- Hooks ----------

// Auto-generate slug from title if not provided
courseSchema.pre("validate", function (next) {
  if (!this.slug && this.title) {
    this.slug = slugify(this.title);
  }
  next();
});

// Maintain totals & average rating
courseSchema.pre("save", function (next) {
  if (Array.isArray(this.modules)) {
    this.totalModules = this.modules.length;
    this.totalTopics = this.modules.reduce(
      (sum, m) => sum + (Array.isArray(m.topics) ? m.topics.length : 0),
      0
    );
  } else {
    this.totalModules = 0;
    this.totalTopics = 0;
  }

  if (Array.isArray(this.ratings) && this.ratings.length > 0) {
    const avg =
      this.ratings.reduce((s, r) => s + (Number(r.rating) || 0), 0) /
      this.ratings.length;
    this.averageRating = Math.max(0, Math.min(5, Number(avg.toFixed(2))));
  } else {
    this.averageRating = 0;
  }

  next();
});

// ---------- Indexes (schema-level; avoid duplicates) ----------

// Text search
courseSchema.index({
  title: "text",
  description: "text",
  tags: "text",
  keywords: "text",
});

// Common filters
courseSchema.index({ category: 1, subCategory: 1 });
courseSchema.index({ instructor: 1 });
courseSchema.index({ published: 1, isArchived: 1, isFeatured: 1 });
courseSchema.index({ createdAt: -1 });

// Export with hot-reload guard
module.exports =
  mongoose.models.Course || mongoose.model("Course", courseSchema);



i want it like this. 
db.courses.insertOne({});



but dont give any commented lines in between. 









# 📘 Course: Python Automation

---

## 🔹 **Introduction**

**Description:**
Python is one of the most widely used programming languages for automation because of its simplicity, readability, and vast ecosystem of libraries. Automation means making the computer perform repetitive tasks without human intervention. With Python, you can automate everyday tasks like moving files, filling forms, scraping websites, sending emails, or even controlling browsers and APIs.

**Why Python for Automation?**

* Clean syntax (easy to read/write).
* Cross-platform (works on Windows, macOS, Linux).
* Huge standard library (“batteries included”).
* Thousands of external packages (for web scraping, browser automation, data handling, etc.).
* Strong community support.

**Real-world Applications:**

* Auto-download and organize reports.
* Extract and transform Excel/CSV/PDF data.
* Automate website testing with Selenium.
* Control cloud services (AWS, Azure, GCP).
* Schedule jobs like backups or alerts.

Python automation saves **time, reduces errors, and improves efficiency** in both personal and enterprise workflows.

---

## 🔹 **Getting Started with Python Automation**

**Description:**
Before diving into automation, you need to set up Python and a few tools. This section ensures your environment is ready.

### 1. Install Python

* Download from [python.org](https://www.python.org/downloads/)
* Verify installation:

  ```bash
  python --version
  ```

### 2. Install a Code Editor

* Popular: **VS Code**, **PyCharm**, **Sublime Text**
* For beginners: VS Code is free and lightweight.

### 3. Set Up Virtual Environment

Keep dependencies isolated for each project.

```bash
python -m venv env
source env/bin/activate   # macOS/Linux
env\Scripts\activate      # Windows
```

### 4. Install Essential Libraries

```bash
pip install requests beautifulsoup4 pandas openpyxl selenium schedule pyautogui
```

### 5. Your First Automation Script

**Code:**

```python
# simple_automation.py
from datetime import datetime

print("Automation started at:", datetime.now())
```

**Run:**

```bash
python simple_automation.py
```

This verifies your environment works and prints the current time—your first “automation”!

---

✅ With **Introduction** + **Getting Started**, your learners will be ready to move into the **Core Automation Foundations** and the 25 detailed topics I gave earlier.

---

Would you like me to now **merge everything (intro + getting started + 25 topics)** into a **Word/PDF course manual** so you can directly print or distribute it?





## 1) CLI Scripts & Arguments (argparse)

**Description:** Build command-line tools that accept flags/arguments.
**Pattern:**

```python
import argparse

def main():
    p = argparse.ArgumentParser(description="Demo CLI")
    p.add_argument("--name", required=True, help="your name")
    args = p.parse_args()
    print(f"Hello, {args.name}!")

if __name__ == "__main__":
    main()
```

**Example:**
`python app.py --name "Aisha"`

---

## 2) File & Folder Automation (pathlib, shutil)

**Description:** Create, copy, move, delete, and enumerate files safely.
**Pattern:**

```python
from pathlib import Path
import shutil

root = Path("reports")
root.mkdir(exist_ok=True)
for p in Path(".").glob("*.log"):
    shutil.copy(p, root / p.name)
```

**Example:** Copies all `.log` files into `reports/`.

---

## 3) Scheduling Jobs (schedule / cron)

**Description:** Run repeatable tasks (hourly/daily) without manual effort.
**Pattern (with schedule lib):**

```python
import schedule, time

def job():
    print("Task executed")

schedule.every().day.at("09:00").do(job)
while True:
    schedule.run_pending()
    time.sleep(1)
```

**Example:** Fires `job()` every day at 09:00.

---

## 4) Robust Logging (logging)

**Description:** Record what your automation did and when.
**Pattern:**

```python
import logging

logging.basicConfig(
    filename="automation.log",
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s"
)
logging.info("Start run")
```

**Example:** Check `automation.log` to audit runs.

---

## 5) Error Handling & Retries (try/except, backoff)

**Description:** Make scripts resilient to flaky networks/files.
**Pattern (manual retry):**

```python
import time, requests

for attempt in range(3):
    try:
        r = requests.get("https://httpbin.org/status/200", timeout=5)
        r.raise_for_status()
        break
    except Exception as e:
        if attempt == 2: raise
        time.sleep(2)
```

**Example:** Tries up to 3 times before failing.

---

## 6) HTTP/API Automation (requests)

**Description:** Pull/push data from REST APIs for integration tasks.
**Pattern:**

```python
import requests

resp = requests.get("https://api.github.com/repos/python/cpython")
data = resp.json()
print(data["stargazers_count"])
```

**Example:** Prints CPython repo stars.

---

## 7) Web Scraping (requests + BeautifulSoup)

**Description:** Extract information from HTML pages.
**Pattern:**

```python
import requests
from bs4 import BeautifulSoup

html = requests.get("https://example.com").text
soup = BeautifulSoup(html, "html.parser")
for a in soup.select("a"):
    print(a.get("href"))
```

**Example:** Lists all links on a page.

---

## 8) Browser Automation (Selenium / Playwright)

**Description:** Drive real browsers for login flows, dynamic sites.
**Pattern (Selenium):**

```python
from selenium import webdriver
from selenium.webdriver.common.by import By

driver = webdriver.Chrome()
driver.get("https://example.com/login")
driver.find_element(By.ID, "user").send_keys("admin")
driver.find_element(By.ID, "pass").send_keys("secret")
driver.find_element(By.CSS_SELECTOR, "button[type=submit]").click()
print(driver.title)
driver.quit()
```

**Example:** Logs in and prints page title.

---

## 9) Excel/CSV Automation (pandas, openpyxl)

**Description:** Read, transform, and export tabular data.
**Pattern (pandas):**

```python
import pandas as pd

df = pd.read_csv("input.csv")
df["total"] = df["qty"] * df["price"]
df.to_excel("output.xlsx", index=False)
```

**Example:** Adds a computed column and saves to Excel.

---

## 10) PDF Automation (PyPDF2 / pdfplumber)

**Description:** Merge/split PDFs; extract text or pages.
**Pattern (merge PDFs):**

```python
from PyPDF2 import PdfMerger

merger = PdfMerger()
for name in ["a.pdf", "b.pdf", "c.pdf"]:
    merger.append(name)
merger.write("merged.pdf")
merger.close()
```

**Example:** Combines three PDFs.

---

## 11) Email Automation (smtplib / imaplib)

**Description:** Send reports or fetch inbox for rules/processing.
**Pattern (send email via SMTP):**

```python
import smtplib
from email.message import EmailMessage

msg = EmailMessage()
msg["Subject"] = "Daily Report"
msg["From"] = "me@example.com"
msg["To"] = "you@example.com"
msg.set_content("Attached is today's report.")

with smtplib.SMTP_SSL("smtp.gmail.com", 465) as s:
    s.login("me@example.com", "app_password")
    s.send_message(msg)
```

**Example:** Sends a plain-text status email.

---

## 12) GUI/Desktop Automation (pyautogui)

**Description:** Automate keyboard/mouse for desktop workflows.
**Pattern:**

```python
import pyautogui as pg, time

time.sleep(2)  # switch to the window
pg.typewrite("Hello Automation!", interval=0.05)
pg.hotkey("ctrl", "s")
```

**Example:** Types text and presses Ctrl+S.

---

## 13) OS & Process Automation (subprocess)

**Description:** Run shell commands, gather outputs, chain tools.
**Pattern:**

```python
import subprocess

out = subprocess.check_output(["ping", "-c", "2", "example.com"], text=True)
print(out)
```

**Example:** Pings a host and prints the result.

---

## 14) SSH & Remote Tasks (paramiko)

**Description:** Run commands and transfer files on remote servers.
**Pattern:**

```python
import paramiko

ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect("server", username="user", password="pass")
stdin, stdout, stderr = ssh.exec_command("uptime")
print(stdout.read().decode())
ssh.close()
```

**Example:** Prints remote server uptime.

---

## 15) Cloud Automation (AWS boto3)

**Description:** Script cloud resources (S3, EC2, Lambda…).
**Pattern (S3 list buckets):**

```python
import boto3

s3 = boto3.client("s3")
resp = s3.list_buckets()
for b in resp["Buckets"]:
    print(b["Name"])
```

**Example:** Lists all S3 buckets.

---

## 16) Testing & API Test Suites (pytest + requests)

**Description:** Automate regressions and API validations.
**Pattern (pytest test file):**

```python
# test_users_api.py
import requests

def test_users_status():
    r = requests.get("https://reqres.in/api/users?page=2")
    assert r.status_code == 200
    assert "data" in r.json()
```

**Example:** `pytest -q` to run the test.

---

## 17) Notifications & ChatOps (Slack webhook)

**Description:** Send alerts to Slack/Teams after jobs finish.
**Pattern (Slack incoming webhook):**

```python
import requests, json

webhook = "https://hooks.slack.com/services/XXX/YYY/ZZZ"
payload = {"text": "Job complete ✅"}
requests.post(webhook, data=json.dumps(payload))
```

**Example:** Posts a message to a channel.

---

## 18) Data Pipelines & ETL Glue (compose steps)

**Description:** Chain extract→transform→load with checkpoints.
**Pattern:**

```python
import pandas as pd, requests

raw = requests.get("https://dummyjson.com/products").json()["products"]
df = pd.json_normalize(raw)[["title","price","rating"]]
df.query("price > 100 and rating >= 4").to_csv("premium.csv", index=False)
```

**Example:** Saves filtered products to CSV.

---

## 19) Secrets & Configuration (dotenv)

**Description:** Keep credentials outside your code.
**Pattern:**

```python
from dotenv import load_dotenv
import os

load_dotenv()
token = os.getenv("API_TOKEN")
```

**Example:** Read `API_TOKEN` from `.env`.

---

## 20) Packaging & CLI Distribution (pipx, entry points)

**Description:** Ship your automation as an installable tool.
**Pattern (pyproject.toml excerpt):**

```toml
[project]
name = "my-automation"
version = "0.1.0"
dependencies = ["requests"]

[project.scripts]
mytool = "my_pkg.cli:main"
```

**Example:** After `pip install .`, run `mytool`.

---

## 21) Concurrency for Speed (concurrent.futures)

**Description:** Parallelize I/O (downloads, API calls).
**Pattern:**

```python
from concurrent.futures import ThreadPoolExecutor
import requests

urls = ["https://httpbin.org/delay/1"] * 5
def fetch(u): return requests.get(u).status_code

with ThreadPoolExecutor(max_workers=5) as ex:
    print(list(ex.map(fetch, urls)))
```

**Example:** Fetches 5 URLs concurrently.

---

## 22) Health Checks & Monitoring

**Description:** Validate resources/services before/after tasks.
**Pattern:**

```python
import shutil, socket

assert shutil.which("python"), "Python missing"
with socket.create_connection(("example.com", 80), timeout=5) as s:
    pass
print("All checks passed")
```

**Example:** Simple pre-flight checks.

---

## 23) PDF/Excel Report Generation (ReportLab / pandas+ExcelWriter)

**Description:** Produce shareable reports automatically.
**Pattern (Excel with formats):**

```python
import pandas as pd

df = pd.DataFrame({"Name":["A","B"], "Score":[87,93]})
with pd.ExcelWriter("report.xlsx") as writer:
    df.to_excel(writer, index=False, sheet_name="Summary")
```

**Example:** Creates `report.xlsx`.

---

## 24) Directory Watchers (watchdog)

**Description:** React to file changes (drop folders, hot reload).
**Pattern:**

```python
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from pathlib import Path
import time

class Handler(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory:
            print("New file:", Path(event.src_path).name)

obs = Observer()
obs.schedule(Handler(), ".", recursive=False)
obs.start()
try:
    while True: time.sleep(1)
finally:
    obs.stop(); obs.join()
```

**Example:** Prints when new files appear.

---

## 25) End-to-End Orchestration (make/run scripts)

**Description:** Tie everything into a reproducible pipeline runner.
**Pattern (simple Python orchestrator):**

```python
def step_fetch(): print("fetch…")
def step_transform(): print("transform…")
def step_report(): print("report…")

def run():
    for step in (step_fetch, step_transform, step_report):
        step()

if __name__ == "__main__":
    run()
```

**Example:** A template for sequencing steps.

---